#!/usr/bin/python

from imutils.video import VideoStream
from imutils.video import FPS
import face_recognition
import imutils
import pickle
import time
import cv2
import wiringpi
import sys
import signal
from datetime import datetime
import os
import subprocess

# Initialize 'currentname' to trigger only when a new person is identified
currentname = "unknown"
encodingsP = "encodings.pickle"

# Pin Setup
FACE_LED_PIN = 16    # LED for face detection
DOOR_LED_PIN = 7     # LED for door sensor
DOOR_PIN = 5         # Pin for door sensor (input)
RELAY_PIN = 8        # Pin for relay control
PIR_PIN = 2         # PIR sensor input pin

# Video Recording Settings
FRAME_WIDTH = 640
FRAME_HEIGHT = 480
FPS_RECORDING = 5                 # 5 frames per second for normal playback speed
RECORDING_DURATION = 120          # Maximum duration: 2 minutes (120 seconds)
MIN_RECORDING_TIME = 30           # Minimum duration: 30 seconds
MOTION_RESET_TIME = 10           # Wait 10 seconds without motion before stopping
MOTION_EXTENSION_TIME = 60       # Extend by 1 minute (60 seconds) when new motion detected
MOTION_THRESHOLD = 1000          # Increase this value to reduce sensitivity
MIN_AREA = 500                   # Increase minimum area to reduce false triggers

# Create recordings directory
if not os.path.exists('recordings'):
    os.makedirs('recordings')

# Initialize wiringPi
wiringpi.wiringPiSetup()

# Set up pins
wiringpi.pinMode(FACE_LED_PIN, 1)
wiringpi.pinMode(DOOR_LED_PIN, 1)
wiringpi.pinMode(DOOR_PIN, 0)
wiringpi.pinMode(RELAY_PIN, 1)
wiringpi.pinMode(PIR_PIN, 0)

# Initialize LED states
wiringpi.digitalWrite(FACE_LED_PIN, 0)
wiringpi.digitalWrite(DOOR_LED_PIN, 0)
wiringpi.digitalWrite(RELAY_PIN, 1)

def start_recording():
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f'recordings/motion_{timestamp}.avi'
    
    # Use XVID codec
    fourcc = cv2.VideoWriter_fourcc(*'XVID')
    
    out = cv2.VideoWriter(
        filename,
        fourcc,
        FPS_RECORDING,
        (FRAME_WIDTH, FRAME_HEIGHT),
        True
    )
    
    if not out.isOpened():
        print("Failed to initialize video writer")
        return None, None
        
    print(f"Started recording: {filename}")
    return out, filename

def stop_recording(out, current_filename):
    if out is not None:
        try:
            out.release()
            print("Stopped recording")
            
            # Convert AVI to MP4
            if current_filename and os.path.exists(current_filename):
                output_file = current_filename.replace('.avi', '.mp4')
                
                ffmpeg_cmd = [
                    'ffmpeg',
                    '-i', current_filename,
                    '-c:v', 'libx264',
                    '-preset', 'ultrafast',
                    '-crf', '23',
                    '-r', '5',  # Force output framerate to 10 fps
                    '-y',  # Overwrite output file if it exists
                    output_file
                ]
                
                try:
                    subprocess.run(ffmpeg_cmd, check=True, capture_output=True)
                    
                    # Remove the original AVI file after successful conversion
                    if os.path.exists(output_file) and os.path.getsize(output_file) > 0:
                        os.remove(current_filename)
                        print(f"Converted {current_filename} to {output_file}")
                except subprocess.CalledProcessError as e:
                    print(f"FFmpeg conversion error: {e.stderr.decode()}")
                except Exception as e:
                    print(f"Error during conversion: {str(e)}")
                    
        except Exception as e:
            print(f"Error in stop_recording: {str(e)}")

def signal_handler(sig, frame):
    print("[INFO] You pressed Ctrl+C! Cleaning up...")
    fps.stop()
    print("[INFO] elapsed time: {:.2f}".format(fps.elapsed()))
    print("[INFO] approx. FPS: {:.2f}".format(fps.fps()))
    cv2.destroyAllWindows()
    vs.stop()
    wiringpi.digitalWrite(FACE_LED_PIN, 0)
    wiringpi.digitalWrite(DOOR_LED_PIN, 0)
    wiringpi.digitalWrite(RELAY_PIN, 1)
    sys.exit(0)

# Load face encodings
print("[INFO] loading encodings + face detector...")
data = pickle.loads(open(encodingsP, "rb").read())

# Initialize video stream
print("[INFO] starting video stream...")
vs = VideoStream(src=1, framerate=5).start()
time.sleep(2.0)

# Start FPS counter
fps = FPS().start()

# Register signal handler
signal.signal(signal.SIGINT, signal_handler)

# Recording state variables
recording = False
out = None
current_filename = None
recording_start_time = 0
last_motion_time = 0
try:
    while True:
        # Get frame
        frame = vs.read()
        if frame is None:
            continue
            
        frame = imutils.resize(frame, width=500)

        # Check PIR sensor
        motion_detected = wiringpi.digitalRead(PIR_PIN)
        current_time = time.time()
        
        # Handle motion recording
        if motion_detected:
            print("Motion detected!")
            if not recording:
                out, current_filename = start_recording()
                if out is not None:
                    recording = True
                    recording_start_time = current_time
                    last_motion_time = current_time
            else:
                last_motion_time = current_time
            
            if out is not None and out.isOpened():
                try:
                    resized_frame = cv2.resize(frame, (FRAME_WIDTH, FRAME_HEIGHT))
                    out.write(resized_frame)
                except Exception as e:
                    print(f"Error writing frame: {str(e)}")
                    stop_recording(out, current_filename)
                    recording = False
                    out = None
                    current_filename = None
        elif recording:
            # Calculate times
            total_recording_time = current_time - recording_start_time
            time_since_last_motion = current_time - last_motion_time
            
            # Determine if we should stop recording
            should_stop = False
            
            # Stop if we've exceeded maximum duration
            if total_recording_time >= RECORDING_DURATION:
                print(f"Stopping recording: reached maximum duration of {RECORDING_DURATION}s")
                should_stop = True
            # Stop if minimum time has passed and no motion for MOTION_RESET_TIME
            elif total_recording_time >= MIN_RECORDING_TIME and time_since_last_motion >= MOTION_RESET_TIME:
                print(f"Stopping recording: no motion for {MOTION_RESET_TIME}s")
                should_stop = True
                
            if should_stop:
                stop_recording(out, current_filename)
                recording = False
                out = None
                current_filename = None
            elif out is not None and out.isOpened():
                try:
                    resized_frame = cv2.resize(frame, (FRAME_WIDTH, FRAME_HEIGHT))
                    out.write(resized_frame)
                except Exception as e:
                    print(f"Error writing frame: {str(e)}")
                    stop_recording(out, current_filename)
                    recording = False
                    out = None
                    current_filename = None

        # Check door sensor
        if wiringpi.digitalRead(DOOR_PIN) == 1:
            print("DOOR OPEN")
            wiringpi.digitalWrite(DOOR_LED_PIN, 1)
        else:
            wiringpi.digitalWrite(DOOR_LED_PIN, 0)

        # Face recognition
        boxes = face_recognition.face_locations(frame)
        encodings = face_recognition.face_encodings(frame, boxes)
        names = []

        for encoding in encodings:
            matches = face_recognition.compare_faces(data["encodings"], encoding)
            name = "Unknown"

            if True in matches:
                matchedIdxs = [i for (i, b) in enumerate(matches) if b]
                counts = {}

                for i in matchedIdxs:
                    name = data["names"][i]
                    counts[name] = counts.get(name, 0) + 1

                name = max(counts, key=counts.get)

                if currentname != name:
                    currentname = name
                    print(f"Face detected: {currentname}")

                    wiringpi.digitalWrite(FACE_LED_PIN, 1)
                    wiringpi.digitalWrite(RELAY_PIN, 0)
                    print("Door is opened")

                    time.sleep(3)

                    wiringpi.digitalWrite(FACE_LED_PIN, 0)
                    wiringpi.digitalWrite(RELAY_PIN, 1)
                    print("Door is closed")

                    currentname = "unknown"

            names.append(name)

        # Draw face boxes
        for ((top, right, bottom, left), name) in zip(boxes, names):
            cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 225), 2)
            y = top - 15 if top - 15 > 15 else top + 15
            cv2.putText(frame, name, (left, y), cv2.FONT_HERSHEY_SIMPLEX, .8, (0, 255, 255), 2)

        # Display frame
        cv2.imshow("Facial Recognition is Running", frame)
        key = cv2.waitKey(1) & 0xFF

        if key == ord("q"):
            break

        fps.update()

except KeyboardInterrupt:
    if recording:
        stop_recording(out, current_filename)
    signal_handler(None, None)

except Exception as e:
    print(f"An error occurred: {str(e)}")
    if recording:
        stop_recording(out, current_filename)

finally:
    fps.stop()
    print("[INFO] elapsed time: {:.2f}".format(fps.elapsed()))
    print("[INFO] approx. FPS: {:.2f}".format(fps.fps()))
    if recording:
        stop_recording(out, current_filename)
    cv2.destroyAllWindows()
    vs.stop()
    wiringpi.digitalWrite(FACE_LED_PIN, 0)
    wiringpi.digitalWrite(DOOR_LED_PIN, 0)
    wiringpi.digitalWrite(RELAY_PIN, 1)
